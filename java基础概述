@@ -0,0 +1,378 @@
##今日内容
>* Java概述、helloworld案例
>* 工具安装 、配置环境变量、注释、关键字
>* 常量、变量、数据类型、标识符


##01. 课程介绍
java基础


##02. Java语言发展史和平台概述
>* Java语言是谁在哪个公司开发的?
>* Java语言平台分为?

	总结:
		1: 詹姆斯高斯林  Sun公司研发.
		2: 
			JavaSe
					: java语言的基础部分 --> 实现简单的桌面应用开发
			JavaMe
					: 应用于嵌入式开发的程序
			JavaEE
					: 应用于Web服务器方向的开发
			
##03. JVM,JRE,JDK的概述
>* 什么是jdk?
>* 什么是jre?
>* 什么是jvm?
>* 三者之间有什么关系?

	总结:
		1: jdk是提供给我们开发人员使用的工具, 内部包含了jre
		2: jre内部提供了java的核心类库, 以及jvm虚拟机
		3:
			jvm是我们java程序运行的一个载体.
				
				java的跨平台原理:
					因为在不同操作系统上安装了对应版本的jvm虚拟机.

					jvm不可以跨平台.
		4:

			包含关系
				jdk --> jre --> jvm

##04. 常用DOS命令
>* 如何打开DOS控制台?

	总结:
		1: win + R + cmd 
		2: 在文件夹的输入框中直接敲cmd 
				--> 在当前文件的目录下打开dos控制台
		3: 
		   shift + 鼠标右键点击 + 在此处打开DOS命令行
>* 常用DOS命令:

	盘符切换  : 盘符名称 + :
	列出当前目录下的文件及文件夹 : ? dir
	改变指定目录(进入指定目录) : ?  cd
	回退	: ? cd..
	退回到根目录 : ? cd\
	清屏 : ?  cls
	退出dos命令行 : ? exit

	扩展:
		shutdown -s -t 秒数
			指定时间后关闭计算机
		shutdown -a 
			取消关机计划

			

##05. JDK的下载和安装
* A:JDK的下载
	* a:官网 http://www.oracle.com
	* b:演示下载流程
* B:JDK的安装
	* a:傻瓜式安装
		* 双击安装程序，然后一路next即可(但是不建议)
	* b:安装的推荐方式
		* 安装路径不要有中文或者特殊符号如空格等。
		* 所有和开发相关的软件最好安装目录统一。
			* 举例：我的JDK安装路径
				* D:\develop\Java\jdk1.7.0_72
		* 当提示安装JRE时，可以选择不安装。建议还是安装上。
	* c:演示安装流程
		* 可以先在d盘建立一个文件夹develop
		* 然后演示安装过程
* C:验证安装是否成功
	* a:通过DOS命令，切换到JDK安装的bin目录下。
		* D:\develop\Java\jdk1.7.0_72\bin
	* b:然后分别输入javac和java，如果正常显示一些内容，说明安装成功


##06. HelloWorld案例的编写和运行
>* 标准代码

	public class Demo {
		public static void main(String[] args){
			System.out.println("HelloWorld!");
		}
	}

	* 如果在class的前面加上了public, 那么类名就必须跟源文件的名字保持一致.

>* java程序运行的步骤?

	总结:
		1: 通过javac命令将编写好的源文件, 编译生成字节码文件 --> .class
		2: 通过java命令将字节码文件运行起来.


##07. HelloWorld案例常见问题
>* 1. 单词拼写问题  
>* 2. 中文符号问题 
>* 3. 文件找不到



##08. Notepad++软件的安装和配置
>* 配置
	* 设置 -> 首选项 -> 新建 -> 默认语言改Java
	* 设置 -> 首选项 -> 新建 -> 编码改为ANSI
	* 设置 -> 首选项 -> 自动完成 -> 自动输入 -> 左侧6个都勾上


##09. Path环境变量的配置
>* 为什么要配置path环境变量
	* 目的是为了可以在各个盘符下都能访问到bin目录当中的javac、java工具.

>* 两种配置方式

	总结:
		1: 
			JAVA_HOME (推荐方案)
				计算机右键 - 属性 - 环境变量 
					在系统变量当中新建一个JAVA_HOME
						在变量值当中填写jdk的安装目录
				将JAVA_HOME系统变量所记录的路径引入到Path当中, 并拼接上\bin;
						%JAVA_HOME%\bin;
		2:  	
			直接将jdk的bin目录路径赋值到path环境变量当中即可. (不推荐)

##10. 注释的概述和分类
>* 注释分为哪些?
>* 分别如何编写?
>* 注释的作用?

	总结:
		1:
			单行注释
			多行注释
			文档注释
		2:	
			//
			/*  注释内容   */
			/**  注释内容  */
		3:
			1. 对代码的一种解释, 方便我们程序员去阅读代码的.
			2. 可以使用注释来帮我们调试程序的错误.

##11. 关键字的概述和特点
>* 什么是关键字? 
>* 关键字有什么特点?

	总结:
		1: 被Java赋予特殊含义的单词
		2: 
			所有字母全部小写
			类似于notepad++这样的高级记事本, 对关键字有特殊颜色的高亮显示.

##12. 常量的概述和分类
>* 什么是常量?
>* 常量的分类?

	总结:
		1:  在程序的执行过程中, 其值不可以发生改变的量.  
		2:
			字符串常量			--> 被双引号括起来的内容
			整数常量				--> 所有整数
			小数常量				--> 所有小数
			字符常量				--> 被单引号括起来的内容, 里面只能放单个字符 ' '
			布尔常量				--> true  false
			空常量				--> null


##13. 变量的概述和定义格式
>* 什么是变量?
>* 变量的作用是什么?

	总结:
		1: 在程序的执行过程中, 其值在某个范围内可以发生改变的量
				问题: 某个范围是什么意思?
						因为数据类型的取值范围不同, 所以能够赋值的范围也就限定了.
		2:
			变量用于记录不断发生改变的常量, 并且可以重复使用.

		3:
			定义变量的格式:
				数据类型  变量名 = 变量值;

##14. 计算机存储单元概述
>* A: 计算机中储存和运算的最小单位是？

	* a: 字节
	* b: 常用储存单位
		*1B（字节） = 8bit
		*1KB = 1024B
		*1MB = 1024KB
		*1GB = 1024MB
		*1TB = 1024GB
		*1PB = 1024TB
		(为什么500G大小的硬盘，实际容量只有四百六十多G？)
		
		500 - > 500 * 1000 * 1000 * 1000 / 1024 / 1024 / 1024

##15. 数据类型概述和分类
>* 为什么要有数据类型?
>* 数据类型的分类为?

	总结:
		1: java是强类型语言, 对于每一种数据都定义了具体的数据类型, 并在内存中分配了不同大小的内存空间.
		2:
			基本数据类型:
				整数类型:
					byte			1个字节		-128~127
					short			2个字节
					int				4个字节
					long			8个字节
				浮点(小数)类型:
					float			4个字节
					double			8个字节
				字符类型:	
					char			2个字节
				布尔类型:
					boolean			1个字节
										
									理论上来说8分之1个字节就能表示它的大小, 但是java中并没有明确它的大小
									然而计算机中的最小存储单位是字节, 所以boolean类型应该占的是一个字节.
			引用数据类型:
				//TODO:
	注意:
		所有整数默认都是?				int类型
		所有小数默认都是?				double类型
		定义float类型变量应该加?		需要在数值的后面机上f表示, 大小写都可以.
		定义Long类型变量应该加?		需要在数值的后面加上L标识, 大小写都可以, 建议大写


##16. 标识符的组成和注意事项
>* 什么是标识符?
>* 标识符的组成规则为?
>* 标识符的注意事项?

	总结:
		1:  就是自己给类,方法,接口,变量..起的名字
				大白话: 自己起的名字
		2:
			26个英文字母大小写都可以
			数字0-9
			_  $

			中文汉字是否可以当做标识符?  可以, 但是不推荐!
		3:
			关键字不能当做标识符使用
			数字不能开头
			中间不能用空格隔开

##17. 标识符的命名规则(江湖规矩)

	总结:
		命名原则:见名知意
		a.包
			 最好是域名倒过来,要求所有的字母小写 
		b.类或者接口
			 如果是一个单词首字母大写		-> Demo
			 如果是多个单词每个单词首字母大写(驼峰标识)  --> DemoHelloWorld
		c.方法或者变量
			 如果是一个单词全部小写		--> age   show()
			 如果是多个单词,从第二个单词首字母大写 --> maxAge   getMax()
		d.常量(这里指的是自定义常量, 就业班接触)
			 如果是一个单词,所有字母大写
			 如果是多个单词,所有的单词大写,用下划线区分每个单词

##18. 基本数据类型变量的定义和使用
>* 案例演示
>* 注意long类型和float

	总结:
		定义long类型的变量需要加上L的标识, 如果不加的话, 那么就默认还是int类型
		定义float类型的变量需要加上F的表示, 不加的话, 默认就是double类型


##19. 变量定义的注意事项

	总结:
		1: 变量未赋值的话, 不能直接使用的
				局部变量在使用之前必须完成初始化
					(定义了变量, 没有赋值, 也没有使用 不会报错)
		2: 变量的作用域
				局部变量的作用域仅在它所在的那对儿大括号中有效
		3:
		   一条语句可以定义多个变量, 中间需要用空格隔开, 但是不建议使用
				int a, b, c;
				a = 10;
				b = 20;
				c = 30;

			变量名不允许使用关键字, 不能出现相同的变量名.

			int a = 10;
			int a = 20;


##20. 类型转换之隐式转换
>* 什么是数据类型的隐式转换?
	
	总结:
		1: 将小的数据类型赋值给大的数据类型可以直接赋值

	举例:
		1:
			byte b = 10;
			int i = b;

		
##21. 隐式转换图解
>* 看图说话

	byte b = 10;
	int i = 20;
	int c = i + b;

	总结:
			当小的数据类型在跟大的数据类型做运算的时候, 默认会将小的数据类型提升为大的然后再做运算.

			byte short int long  float double 

	扩展:
			float和long谁大谁小?

				float要比long大, 原因是底层的二进制存储形式不同.

				System.out.println(Long.MAX_VALUE - Float.MAX_VALUE);

				获取到long类型的最大值 - float类型的最大值.
				

##22. 类型转换之强制转换
>* 什么是数据类型的强制转换?

	总结:
		1: 将大的数据类型赋值给小的数据类型.
			
			问题: 如何实现?
				
				格式:  被转后的数据类型 变量名 = (转换的数据类型) 数据值;
		
	举例:
		1:
			byte a = 10;
			int b = 20;
			byte c = a + b;

			byte c = (byte)(a + b);

	注意:

		如果强转的值, 超过了数据类型的取值范围, 那么结果可能会跟我们期望的结果不同(损失精度)

		byte b = (byte)130;		-->  127
								-->  -126
